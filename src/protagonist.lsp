;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                                    *=*:        ;;
;;                                         -   -  -  -              :===:         ;;
;;                                                                 *==:           ;;
;;        :-          -  --  +  +- :+  *  +- :+  =  *: :+  *  ::-=*-    :++:      ;;
;;         *===:     +===*    -       -+++-     :=:           - +*   *WWWWWWWWW@- ;;
;;         =======*-*  +===* -=+-+****++++++++++++*#@@W#*==#WWW+   -WWWW+   -#WWW:;;
;;            -+*####=+   :===*+++++++*#@@WW*+++++WWWWW@+++=WWW=: -@WWW  -    :-  ;;
;;               -  :+*####WWW@#*++++++WWWWWW++++*WWWWWW*++*WWW@++=WWW*           ;;
;;       -:::-  -:  :-=WWWWWWWWWWW@++++@WWWWW@+++*WW#WWW#+++#WWW++*WWW@- --       ;;
;;   -#WWWWWWWWW+:+*=@WWW=+++++*WWWW*++=WWW=WW#++=WW*@WW@+++*WWW=++#WWW=*:     #WW;;
;;  =WWW#-:  =WWW#=*=WWW*++++++++@WW@++*WWW#=WW=+=WW*#WWW*+++WWW#+++WWWW:  :+-*WWW;;
;; +WWW:      -:- *=#WWW+++++++++=WWW=++@WW@+#WW*#WW+*WWW#+++#WWW+++*@WWWWWWWWWW@-;;
;; #WW@   -  -: -#=+=WWW*+*+*++++=WWW=++#WWW*+@WW@W@++@WW@+++=WWW=+*++**#WWW@=:   ;;
;; =WWW      -+*#=***WWWW**+*+**+@WWW+*+*WWW#++@WWW@++#WWW*+++#=**+++++=: -       ;;
;; :WWW*       +WWW=**WWWW#****#WWWW*****@WW@***@#=*+*+*++++++++++++++**          ;;
;;  *WWW* -  -*WWW@#***=WWWWWWWWWW=*****************************+*+**+*=*-        ;;
;;   :WWWWWWWWWWW@@@#******===*************************************=#---          ;;
;;     :@WWWWWW=:: :++#=******************************************=*              ;;
;;  -@@@@@#*-  -=#: --+==***********************************=*##=*=#:             ;;
;;   @=:   -*@@*       =====##*=#=**=**********************==+= +@=-              ;;
;;                   -  :  +*@@#*:**==***=****=*****==+--:*#- -@* +@@@+           ;;  
;;                      :#@@#- :+      +#:*+-   -*#-            #@- :#==*:        ;;
;;                   *@@@@#-             -                                        ;;
;;                      :-                                                        ;;
;; COMIC 1                                                                        ;;
;; Media-Integrative Composition in Common Lisp                        Simon Bahr ;;      
;; render/protagonist.lsp                                                    2020 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(in-package :comic)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; ****c* placed-object/protagonist
;;; Name
;;; protagonist
;;;
;;; File
;;; protagonist.lsp
;;;
;;; Description
;;; Protagonists are abstract representations of the entites that 
;;; "receive" the data generated by Comic. It could e.g. be a 
;;; a performer, a loudspeaker, a videoscreen, etc. During render,
;;; Comic will select the closest possible protagonist for each 
;;; event. An event can be rendered to a protagonist when one of
;;; its render-modes can produce data matching the output-type of
;;; of the protagonist. It can also be rendered if the value of its
;;; render-mode-slot is nil and the protagonist has a render-mode. 
;;; In both cases, the event of cause also needs to provide the  
;;; slot-values that the render-mode requests (required-slots).
;;;
;;; N.B.: At least one protagonist is always required when 
;;; rendering events, even if Comics ability to distribute events
;;; to different Protagnoists is not used at all. In the case of 
;;; only one protagonist, it can be seen as an explicit statement  
;;; of the desired output-type.
;;;
;;; Slots
;;; output-type, output-files, can-render-simultaneous-events
;;;
;;; Last Modified
;;; 2020/06/23
;;;
;;; Synopsis
(defclass protagonist (named-object placed-object)
  (;; the output-type of the protagonist, :sound, :video...
   (output-type
    :accessor output-type
    :initarg :output-type
    :initform nil)
   ;; all output-files will be collected here
   (output-files
    :accessor output-files
    :initarg :output-files
    :initform nil)
   (can-render-simultaneous-events
    :initarg :can-render-simultaneous-events
    :initform nil)))
;;; ****

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; ****f* protagonist/make-protagonist
;;; Name
;;; make-protagonist
;;;
;;; File
;;; protagonist.lsp
;;;
;;; Description
;;; Creates a protagonist. When a name is given, the protagonist
;;; will be added to +cc-data+ and can be accessed using 
;;; (get-protagonist name) or (cc-get :protagonist name).
;;;
;;; Arguments
;;; output-type
;;; 
;;; Optional Arguments
;;; name
;;; location (default: '(0))
;;; expansion (default: '(0))
;;; render-modes
;;; can-render-simultaneous-events (default: t)
;;;
;;; Return Value
;;; a protagonist
;;;
;;; Example
#|
(make-protagonist :sound :name 'mono-sf :location '(0) :expansion '(0))
(make-protagonist :sound :name 'stereo-sf :location '(0) :expansion '(2))
(make-protagonist :sound :name '4-channel-sf :location '(0 0) :expansion '(2 2))
(make-protagonist :sound :name '8-channel-sf :location '(0 0 0) :expansion '(2 2 2))
(make-protagonist :sound :name '16-channel-sf :location '(0 0 0 0) :expansion '(2 2 2 2))
;; -> channels as interpreted by soundfile-mode

(make-protagonist :midi :name 'midi-file)
;; -> a single-channel midi-file

(make-protagonist :video :name 'screen :location '(0 0) :expansion '(16 9))
;; -> example for a videoscreen
|#
;;;
;;; Last Modified
;;; 2020/06/23
;;;
;;; Synopsis
(defun make-protagonist (output-type
			 &key
			   name
			   (location '(0))
			   (expansion '(0))
			   render-modes
			   (can-render-simultaneous-events t))
;;; ****
  (setq render-modes
	(loop for mode in (flat render-modes)
	      collect
	      (progn
		(let ((the-mode (get-render-mode mode)))
		  (unless the-mode
		    (cc-error 'MAKE-PROTAGONIST
			"The render-mode ~a could not be found." mode))
		  (if (eq (output-type the-mode) output-type)
		      the-mode
		      (cc-error 'MAKE-PROTAGONIST
			  "The output-type ~a~%of render-mode ~a does not match~%~
                  the specified output-type of the protagonist (~a)."
			(output-type the-mode) the-mode output-type))))))
  (ensure-list location) (ensure-list expansion)
  (unless (member output-type (cc-get :output-types))
    (add-output-type output-type))
  (when (and (not (null expansion))
	     (not (eq (length location)
		      (length expansion))))
    (cc-error 'MAKE-PROTAGONIST "location (~a) and ~
                   expansion (~a)~%must be lists of equal length."
      location expansion))
  (let ((obj
	  (make-instance 'protagonist
			 :name (if name name 'anonymous-protagonist)
			 :location location
			 :expansion expansion
			 :output-type output-type
			 :render-modes render-modes
			 :can-render-simultaneous-events
			 can-render-simultaneous-events)))
    (when name
      (cc-set :protagonists (acons name obj (cc-get :protagonists))))
    obj))

;; print-method for protagonists
(defmethod print-object ((obj protagonist) stream)
  (let ((name (name obj))
  	(location (location obj))
  	(expansion (expansion obj))
  	(output-type (slot-value obj 'output-type))
  	(render-modes (render-modes obj)))
    (format stream "#<PROTAGONIST")
    (when name (format stream ", name: ~a" name))
    (when output-type (format stream ", output-type: ~s" output-type))
    (when location (format stream ", location: ~{~a~^ ~}" location))
    (when expansion (format stream ", expansion: ~{~a~^ ~}" expansion))
    (when render-modes (format stream ", render-modes: ~a" render-modes))
    (format stream ">")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; ****f* protagonist/get-protagonist
;;; Name
;;; get-protagonist
;;;
;;; File
;;; protagonist.lsp
;;;
;;; Description
;;; Returns a protagonist, that was defined using make-protagonist.
;;; Can only be used if a name was given to the protagonist, 
;;; otherwise the object will not be stored in +cc-data+.
;;; The function is syntactic sugar for (cc-get :protagonist name).
;;;
;;; Arguments
;;; name: the name of the protagnoist
;;;
;;; Return Value
;;; a protagonist
;;;
;;; Last Modified
;;; 2020/06/23
;;;
;;; Synopsis
(defun get-protagonist (name)
  (cc-get :protagonists name))
;;; ****

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; ****f* protagonist/protagonistp
;;; Name
;;; protagonistp
;;;
;;; File
;;; protagonist.lsp
;;;
;;; Description
;;; Returns t if obj is a protagonist.
;;;
;;; Arguments
;;; obj: any object
;;;
;;; Return Value
;;; boolean
;;;
;;; Last Modified
;;; 2021/01/28
;;;
;;; Synopsis
(defun protagonistp (obj)
  (when (typep obj 'protagonist) t))
;;; ****

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;EOF
